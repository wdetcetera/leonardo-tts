import { Box, Button, Icon } from '@mui/material';
import React from 'react';
import { AudioMediaRecorder } from '../audio-media-recorder';
export function MuiAudioInput({
  chatController,
  actionRequest
}) {
  const chatCtl = chatController;
  const [audioRec] = React.useState(AudioMediaRecorder.getInstance());
  const [stopped, setStopped] = React.useState(true);
  const [audio, setAudio] = React.useState();
  const handleError = React.useCallback(error => {
    const value = {
      type: 'audio',
      value: error.message,
      error
    };
    chatCtl.setActionResponse(actionRequest, value);
  }, [actionRequest, chatCtl]);
  const handleStart = React.useCallback(async () => {
    try {
      await audioRec.initialize();
      await audioRec.startRecord();
      setStopped(false);
    } catch (error) {
      handleError(error);
    }
  }, [audioRec, handleError]);
  const handleStop = React.useCallback(async () => {
    try {
      const a = await audioRec.stopRecord();
      setAudio(a);
      setStopped(true);
    } catch (error) {
      handleError(error);
    }
  }, [audioRec, handleError]);
  const sendResponse = React.useCallback(() => {
    if (audio) {
      const value = {
        type: 'audio',
        value: 'Audio',
        audio
      };
      chatCtl.setActionResponse(actionRequest, value);
      setAudio(undefined);
    }
  }, [actionRequest, audio, chatCtl]);
  const sendButtonText = actionRequest.sendButtonText ? actionRequest.sendButtonText : 'Send';
  return /*#__PURE__*/React.createElement(Box, {
    sx: {
      flex: '1 1 auto',
      display: 'flex',
      '& > *': {
        flex: '1 1 auto',
        minWidth: 0
      },
      '& > * + *': {
        ml: 1
      }
    }
  }, stopped && /*#__PURE__*/React.createElement(Button, {
    type: "button",
    onClick: handleStart,
    disabled: !stopped,
    variant: "contained",
    color: "primary",
    startIcon: /*#__PURE__*/React.createElement(Icon, null, "keyboard_voice")
  }, "Rec start"), !stopped && /*#__PURE__*/React.createElement(Button, {
    type: "button",
    onClick: handleStop,
    disabled: stopped,
    variant: "contained",
    color: "primary",
    startIcon: /*#__PURE__*/React.createElement(Icon, null, "stop")
  }, "Rec stop"), /*#__PURE__*/React.createElement(Button, {
    type: "button",
    onClick: sendResponse,
    disabled: !audio,
    variant: "contained",
    color: "primary",
    startIcon: /*#__PURE__*/React.createElement(Icon, null, "send")
  }, sendButtonText));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,