import { Box, Button, Divider, Icon, List, ListItem, ListItemIcon, Typography } from '@mui/material';
import React from 'react';
export function MuiFileInput({
  chatController,
  actionRequest
}) {
  const chatCtl = chatController;
  const [files, setFiles] = React.useState([]);
  const handleFileChange = React.useCallback(fileList => {
    // Convert FileList to File[]
    const fileArray = [];

    if (fileList) {
      for (let i = 0; i < fileList.length; i += 1) {
        const file = fileList.item(i);

        if (file) {
          fileArray.push(file);
        }
      }
    }

    setFiles(fileArray);
  }, []);
  const setResponse = React.useCallback(() => {
    if (files.length > 0) {
      const value = files.map(f => f.name).toString();
      const res = {
        type: 'file',
        value,
        files
      };
      chatCtl.setActionResponse(actionRequest, res);
    }
  }, [actionRequest, chatCtl, files]);
  const sendButtonText = actionRequest.sendButtonText ? actionRequest.sendButtonText : 'Send';
  return /*#__PURE__*/React.createElement(Box, {
    sx: {
      flex: '1 1 auto',
      maxWidth: '100%',
      display: 'flex',
      flexDirection: 'column',
      '& > *': {
        flex: '0 0 auto',
        maxWidth: '100%'
      },
      '& > * + *': {
        mt: 1
      }
    }
  }, /*#__PURE__*/React.createElement(List, null, files.map(f => /*#__PURE__*/React.createElement("div", {
    key: `${f.name}-${f.size}`
  }, /*#__PURE__*/React.createElement(Divider, null), /*#__PURE__*/React.createElement(ListItem, {
    key: f.name
  }, /*#__PURE__*/React.createElement(ListItemIcon, null, /*#__PURE__*/React.createElement(Icon, null, "attach_file")), /*#__PURE__*/React.createElement(Typography, {
    style: {
      overflowWrap: 'break-word',
      minWidth: 0
    }
  }, f.name))))), /*#__PURE__*/React.createElement(Box, {
    sx: {
      display: 'flex',
      '& > *': {
        flex: '1 1 auto',
        minWidth: 0
      },
      '& > * + *': {
        ml: 1
      }
    }
  }, /*#__PURE__*/React.createElement(Button, {
    disabled: false,
    component: "label",
    variant: "contained",
    color: "primary",
    startIcon: /*#__PURE__*/React.createElement(Icon, null, "folder")
  }, "Select file", /*#__PURE__*/React.createElement("input", {
    type: "file",
    accept: actionRequest.accept,
    multiple: actionRequest.multiple,
    onChange: e => handleFileChange(e.target.files),
    style: {
      display: 'none'
    }
  })), /*#__PURE__*/React.createElement(Button, {
    type: "button",
    onClick: setResponse,
    disabled: files.length === 0,
    variant: "contained",
    color: "primary",
    startIcon: /*#__PURE__*/React.createElement(Icon, null, "send")
  }, sendButtonText)));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,