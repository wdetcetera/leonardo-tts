import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
export class ChatController {
  constructor(option) {
    _defineProperty(this, "state", void 0);

    _defineProperty(this, "defaultOption", {
      delay: 300
    });

    _defineProperty(this, "emptyAction", {
      request: {
        type: 'empty'
      },
      responses: [],
      onResnponsed: []
    });

    _defineProperty(this, "defaultActionRequest", {
      always: false,
      addMessage: true
    });

    this.state = {
      option: _objectSpread(_objectSpread({}, this.defaultOption), option),
      messages: [],
      action: this.emptyAction,
      actionHistory: [],
      onMessagesChanged: [],
      onActionChanged: []
    };
  }

  addMessage(message) {
    return new Promise(resolve => {
      setTimeout(() => {
        const len = this.state.messages.push(message);
        const idx = len - 1;
        this.state.messages[idx].createdAt = new Date();
        this.callOnMessagesChanged();
        resolve(idx);
      }, this.state.option.delay);
    });
  }

  updateMessage(index, message) {
    if (message !== this.state.messages[index]) {
      const {
        createdAt
      } = this.state.messages[index];
      this.state.messages[index] = message;
      this.state.messages[index].createdAt = createdAt;
    }

    this.state.messages[index].updatedAt = new Date();
    this.callOnMessagesChanged();
  }

  removeMessage(index) {
    this.state.messages[index].deletedAt = new Date();
    this.callOnMessagesChanged();
  }

  getMessages() {
    return this.state.messages;
  }

  setMessages(messages) {
    this.clearMessages();
    this.state.messages = [...messages];
    this.callOnMessagesChanged();
  }

  clearMessages() {
    this.state.messages = [];
    this.callOnMessagesChanged();
  }

  callOnMessagesChanged() {
    this.state.onMessagesChanged.map(h => h(this.state.messages));
  }

  addOnMessagesChanged(callback) {
    this.state.onMessagesChanged.push(callback);
  }

  removeOnMessagesChanged(callback) {
    const idx = this.state.onMessagesChanged.indexOf(callback); // eslint-disable-next-line @typescript-eslint/no-empty-function

    this.state.onActionChanged[idx] = () => {};
  }

  setActionRequest(request, onResponse) {
    const action = {
      request: _objectSpread(_objectSpread({}, this.defaultActionRequest), request),
      responses: [],
      onResnponsed: []
    }; // See setActionResponse method

    return new Promise((resolve, reject) => {
      if (!request.always) {
        const returnResponse = response => {
          if (!response.error) {
            resolve(response);
          } else {
            reject(response.error);
          }
        };

        action.onResnponsed.push(returnResponse);
      }

      if (onResponse) {
        action.onResnponsed.push(onResponse);
      }

      this.state.action = action;
      this.state.actionHistory.push(action);
      this.callOnActionChanged(action.request);

      if (request.always) {
        resolve({
          type: 'text',
          value: 'dummy'
        });
      }
    });
  }

  cancelActionRequest() {
    this.state.action = this.emptyAction;
    this.callOnActionChanged(this.emptyAction.request);
  }

  getActionRequest() {
    const {
      request,
      responses
    } = this.state.action;

    if (!request.always && responses.length > 0) {
      return undefined;
    }

    return request;
  }

  async setActionResponse(request, response) {
    const {
      request: origReq,
      responses,
      onResnponsed
    } = this.state.action;

    if (request !== origReq) {
      throw new Error('Invalid action.');
    }

    if (!request.always && onResnponsed.length === 0) {
      throw new Error('onResponsed is not set.');
    }

    responses.push(response);
    this.callOnActionChanged(request, response);

    if (request.addMessage) {
      await this.addMessage({
        type: 'text',
        content: response.value,
        self: true
      });
    }

    onResnponsed.map(h => h(response));
  }

  getActionResponses() {
    return this.state.action.responses;
  }

  callOnActionChanged(request, response) {
    this.state.onActionChanged.map(h => h(request, response));
  }

  addOnActionChanged(callback) {
    this.state.onActionChanged.push(callback);
  }

  removeOnActionChanged(callback) {
    const idx = this.state.onActionChanged.indexOf(callback); // eslint-disable-next-line @typescript-eslint/no-empty-function

    this.state.onActionChanged[idx] = () => {};
  }

  getOption() {
    return this.state.option;
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,