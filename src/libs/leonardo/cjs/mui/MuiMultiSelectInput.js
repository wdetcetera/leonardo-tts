"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MuiMultiSelectInput = MuiMultiSelectInput;

var _material = require("@mui/material");

var _react = _interopRequireDefault(require("react"));

function MuiMultiSelectInput({
  chatController,
  actionRequest
}) {
  const chatCtl = chatController;

  const [values, setValues] = _react.default.useState([]);

  const handleSelect = _react.default.useCallback(value => {
    if (!values.includes(value)) {
      setValues([...values, value]);
    } else {
      setValues(values.filter(v => v !== value));
    }
  }, [values]);

  const setResponse = _react.default.useCallback(() => {
    const options = actionRequest.options.filter(o => values.includes(o.value));
    const res = {
      type: 'multi-select',
      value: options.map(o => o.text).toString(),
      options
    };
    chatCtl.setActionResponse(actionRequest, res);
    setValues([]);
  }, [actionRequest, chatCtl, values]);

  const sendButtonText = actionRequest.sendButtonText ? actionRequest.sendButtonText : 'Send';
  return /*#__PURE__*/_react.default.createElement(_material.Box, {
    sx: {
      flex: '1 1 auto',
      display: 'flex',
      flexDirection: 'column',
      '& > *': {
        flex: '0 0 auto',
        maxWidth: '100%'
      },
      '& > * + *': {
        mt: 1
      }
    }
  }, actionRequest.options.map(o => /*#__PURE__*/_react.default.createElement(_material.Button, {
    key: actionRequest.options.indexOf(o),
    type: "button",
    value: o.value,
    onClick: e => handleSelect(e.currentTarget.value),
    variant: !values.includes(o.value) ? 'outlined' : 'contained',
    color: "primary"
  }, o.text)), /*#__PURE__*/_react.default.createElement(_material.Button, {
    type: "button",
    onClick: setResponse,
    disabled: values.length === 0,
    variant: "contained",
    color: "primary",
    startIcon: /*#__PURE__*/_react.default.createElement(_material.Icon, null, "send")
  }, sendButtonText));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tdWkvTXVpTXVsdGlTZWxlY3RJbnB1dC50c3giXSwibmFtZXMiOlsiTXVpTXVsdGlTZWxlY3RJbnB1dCIsImNoYXRDb250cm9sbGVyIiwiYWN0aW9uUmVxdWVzdCIsImNoYXRDdGwiLCJ2YWx1ZXMiLCJzZXRWYWx1ZXMiLCJSZWFjdCIsInVzZVN0YXRlIiwiaGFuZGxlU2VsZWN0IiwidXNlQ2FsbGJhY2siLCJ2YWx1ZSIsImluY2x1ZGVzIiwiZmlsdGVyIiwidiIsInNldFJlc3BvbnNlIiwib3B0aW9ucyIsIm8iLCJyZXMiLCJ0eXBlIiwibWFwIiwidGV4dCIsInRvU3RyaW5nIiwic2V0QWN0aW9uUmVzcG9uc2UiLCJzZW5kQnV0dG9uVGV4dCIsImZsZXgiLCJkaXNwbGF5IiwiZmxleERpcmVjdGlvbiIsIm1heFdpZHRoIiwibXQiLCJpbmRleE9mIiwiZSIsImN1cnJlbnRUYXJnZXQiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQVFPLFNBQVNBLG1CQUFULENBQTZCO0FBQ2xDQyxFQUFBQSxjQURrQztBQUVsQ0MsRUFBQUE7QUFGa0MsQ0FBN0IsRUFNZ0I7QUFDckIsUUFBTUMsT0FBTyxHQUFHRixjQUFoQjs7QUFDQSxRQUFNLENBQUNHLE1BQUQsRUFBU0MsU0FBVCxJQUFzQkMsZUFBTUMsUUFBTixDQUF5QixFQUF6QixDQUE1Qjs7QUFFQSxRQUFNQyxZQUFZLEdBQUdGLGVBQU1HLFdBQU4sQ0FDbEJDLEtBQUQsSUFBeUI7QUFDdkIsUUFBSSxDQUFDTixNQUFNLENBQUNPLFFBQVAsQ0FBZ0JELEtBQWhCLENBQUwsRUFBNkI7QUFDM0JMLE1BQUFBLFNBQVMsQ0FBQyxDQUFDLEdBQUdELE1BQUosRUFBWU0sS0FBWixDQUFELENBQVQ7QUFDRCxLQUZELE1BRU87QUFDTEwsTUFBQUEsU0FBUyxDQUFDRCxNQUFNLENBQUNRLE1BQVAsQ0FBZUMsQ0FBRCxJQUFPQSxDQUFDLEtBQUtILEtBQTNCLENBQUQsQ0FBVDtBQUNEO0FBQ0YsR0FQa0IsRUFRbkIsQ0FBQ04sTUFBRCxDQVJtQixDQUFyQjs7QUFXQSxRQUFNVSxXQUFXLEdBQUdSLGVBQU1HLFdBQU4sQ0FBa0IsTUFBWTtBQUNoRCxVQUFNTSxPQUFPLEdBQUdiLGFBQWEsQ0FBQ2EsT0FBZCxDQUFzQkgsTUFBdEIsQ0FBOEJJLENBQUQsSUFDM0NaLE1BQU0sQ0FBQ08sUUFBUCxDQUFnQkssQ0FBQyxDQUFDTixLQUFsQixDQURjLENBQWhCO0FBSUEsVUFBTU8sR0FBOEIsR0FBRztBQUNyQ0MsTUFBQUEsSUFBSSxFQUFFLGNBRCtCO0FBRXJDUixNQUFBQSxLQUFLLEVBQUVLLE9BQU8sQ0FBQ0ksR0FBUixDQUFhSCxDQUFELElBQU9BLENBQUMsQ0FBQ0ksSUFBckIsRUFBMkJDLFFBQTNCLEVBRjhCO0FBR3JDTixNQUFBQTtBQUhxQyxLQUF2QztBQUtBWixJQUFBQSxPQUFPLENBQUNtQixpQkFBUixDQUEwQnBCLGFBQTFCLEVBQXlDZSxHQUF6QztBQUNBWixJQUFBQSxTQUFTLENBQUMsRUFBRCxDQUFUO0FBQ0QsR0FabUIsRUFZakIsQ0FBQ0gsYUFBRCxFQUFnQkMsT0FBaEIsRUFBeUJDLE1BQXpCLENBWmlCLENBQXBCOztBQWNBLFFBQU1tQixjQUFjLEdBQUdyQixhQUFhLENBQUNxQixjQUFkLEdBQ25CckIsYUFBYSxDQUFDcUIsY0FESyxHQUVuQixNQUZKO0FBSUEsc0JBQ0UsNkJBQUMsYUFBRDtBQUNFLElBQUEsRUFBRSxFQUFFO0FBQ0ZDLE1BQUFBLElBQUksRUFBRSxVQURKO0FBRUZDLE1BQUFBLE9BQU8sRUFBRSxNQUZQO0FBR0ZDLE1BQUFBLGFBQWEsRUFBRSxRQUhiO0FBSUYsZUFBUztBQUNQRixRQUFBQSxJQUFJLEVBQUUsVUFEQztBQUVQRyxRQUFBQSxRQUFRLEVBQUU7QUFGSCxPQUpQO0FBUUYsbUJBQWE7QUFDWEMsUUFBQUEsRUFBRSxFQUFFO0FBRE87QUFSWDtBQUROLEtBY0cxQixhQUFhLENBQUNhLE9BQWQsQ0FBc0JJLEdBQXRCLENBQTJCSCxDQUFELGlCQUN6Qiw2QkFBQyxnQkFBRDtBQUNFLElBQUEsR0FBRyxFQUFFZCxhQUFhLENBQUNhLE9BQWQsQ0FBc0JjLE9BQXRCLENBQThCYixDQUE5QixDQURQO0FBRUUsSUFBQSxJQUFJLEVBQUMsUUFGUDtBQUdFLElBQUEsS0FBSyxFQUFFQSxDQUFDLENBQUNOLEtBSFg7QUFJRSxJQUFBLE9BQU8sRUFBR29CLENBQUQsSUFBYXRCLFlBQVksQ0FBQ3NCLENBQUMsQ0FBQ0MsYUFBRixDQUFnQnJCLEtBQWpCLENBSnBDO0FBS0UsSUFBQSxPQUFPLEVBQUUsQ0FBQ04sTUFBTSxDQUFDTyxRQUFQLENBQWdCSyxDQUFDLENBQUNOLEtBQWxCLENBQUQsR0FBNEIsVUFBNUIsR0FBeUMsV0FMcEQ7QUFNRSxJQUFBLEtBQUssRUFBQztBQU5SLEtBUUdNLENBQUMsQ0FBQ0ksSUFSTCxDQURELENBZEgsZUEwQkUsNkJBQUMsZ0JBQUQ7QUFDRSxJQUFBLElBQUksRUFBQyxRQURQO0FBRUUsSUFBQSxPQUFPLEVBQUVOLFdBRlg7QUFHRSxJQUFBLFFBQVEsRUFBRVYsTUFBTSxDQUFDNEIsTUFBUCxLQUFrQixDQUg5QjtBQUlFLElBQUEsT0FBTyxFQUFDLFdBSlY7QUFLRSxJQUFBLEtBQUssRUFBQyxTQUxSO0FBTUUsSUFBQSxTQUFTLGVBQUUsNkJBQUMsY0FBRDtBQU5iLEtBUUdULGNBUkgsQ0ExQkYsQ0FERjtBQXVDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJveCwgQnV0dG9uLCBJY29uIH0gZnJvbSAnQG11aS9tYXRlcmlhbCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBDaGF0Q29udHJvbGxlciB9IGZyb20gJy4uL2NoYXQtY29udHJvbGxlcic7XG5pbXBvcnQge1xuICBNdWx0aVNlbGVjdEFjdGlvblJlcXVlc3QsXG4gIE11bHRpU2VsZWN0QWN0aW9uUmVzcG9uc2UsXG59IGZyb20gJy4uL2NoYXQtdHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gTXVpTXVsdGlTZWxlY3RJbnB1dCh7XG4gIGNoYXRDb250cm9sbGVyLFxuICBhY3Rpb25SZXF1ZXN0LFxufToge1xuICBjaGF0Q29udHJvbGxlcjogQ2hhdENvbnRyb2xsZXI7XG4gIGFjdGlvblJlcXVlc3Q6IE11bHRpU2VsZWN0QWN0aW9uUmVxdWVzdDtcbn0pOiBSZWFjdC5SZWFjdEVsZW1lbnQge1xuICBjb25zdCBjaGF0Q3RsID0gY2hhdENvbnRyb2xsZXI7XG4gIGNvbnN0IFt2YWx1ZXMsIHNldFZhbHVlc10gPSBSZWFjdC51c2VTdGF0ZTxzdHJpbmdbXT4oW10pO1xuXG4gIGNvbnN0IGhhbmRsZVNlbGVjdCA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgICh2YWx1ZTogc3RyaW5nKTogdm9pZCA9PiB7XG4gICAgICBpZiAoIXZhbHVlcy5pbmNsdWRlcyh2YWx1ZSkpIHtcbiAgICAgICAgc2V0VmFsdWVzKFsuLi52YWx1ZXMsIHZhbHVlXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRWYWx1ZXModmFsdWVzLmZpbHRlcigodikgPT4gdiAhPT0gdmFsdWUpKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFt2YWx1ZXNdLFxuICApO1xuXG4gIGNvbnN0IHNldFJlc3BvbnNlID0gUmVhY3QudXNlQ2FsbGJhY2soKCk6IHZvaWQgPT4ge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBhY3Rpb25SZXF1ZXN0Lm9wdGlvbnMuZmlsdGVyKChvKSA9PlxuICAgICAgdmFsdWVzLmluY2x1ZGVzKG8udmFsdWUpLFxuICAgICk7XG5cbiAgICBjb25zdCByZXM6IE11bHRpU2VsZWN0QWN0aW9uUmVzcG9uc2UgPSB7XG4gICAgICB0eXBlOiAnbXVsdGktc2VsZWN0JyxcbiAgICAgIHZhbHVlOiBvcHRpb25zLm1hcCgobykgPT4gby50ZXh0KS50b1N0cmluZygpLFxuICAgICAgb3B0aW9ucyxcbiAgICB9O1xuICAgIGNoYXRDdGwuc2V0QWN0aW9uUmVzcG9uc2UoYWN0aW9uUmVxdWVzdCwgcmVzKTtcbiAgICBzZXRWYWx1ZXMoW10pO1xuICB9LCBbYWN0aW9uUmVxdWVzdCwgY2hhdEN0bCwgdmFsdWVzXSk7XG5cbiAgY29uc3Qgc2VuZEJ1dHRvblRleHQgPSBhY3Rpb25SZXF1ZXN0LnNlbmRCdXR0b25UZXh0XG4gICAgPyBhY3Rpb25SZXF1ZXN0LnNlbmRCdXR0b25UZXh0XG4gICAgOiAnU2VuZCc7XG5cbiAgcmV0dXJuIChcbiAgICA8Qm94XG4gICAgICBzeD17e1xuICAgICAgICBmbGV4OiAnMSAxIGF1dG8nLFxuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAnJiA+IConOiB7XG4gICAgICAgICAgZmxleDogJzAgMCBhdXRvJyxcbiAgICAgICAgICBtYXhXaWR0aDogJzEwMCUnLFxuICAgICAgICB9LFxuICAgICAgICAnJiA+ICogKyAqJzoge1xuICAgICAgICAgIG10OiAxLFxuICAgICAgICB9LFxuICAgICAgfX1cbiAgICA+XG4gICAgICB7YWN0aW9uUmVxdWVzdC5vcHRpb25zLm1hcCgobykgPT4gKFxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAga2V5PXthY3Rpb25SZXF1ZXN0Lm9wdGlvbnMuaW5kZXhPZihvKX1cbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICB2YWx1ZT17by52YWx1ZX1cbiAgICAgICAgICBvbkNsaWNrPXsoZSk6IHZvaWQgPT4gaGFuZGxlU2VsZWN0KGUuY3VycmVudFRhcmdldC52YWx1ZSl9XG4gICAgICAgICAgdmFyaWFudD17IXZhbHVlcy5pbmNsdWRlcyhvLnZhbHVlKSA/ICdvdXRsaW5lZCcgOiAnY29udGFpbmVkJ31cbiAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICA+XG4gICAgICAgICAge28udGV4dH1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICApKX1cbiAgICAgIDxCdXR0b25cbiAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgIG9uQ2xpY2s9e3NldFJlc3BvbnNlfVxuICAgICAgICBkaXNhYmxlZD17dmFsdWVzLmxlbmd0aCA9PT0gMH1cbiAgICAgICAgdmFyaWFudD1cImNvbnRhaW5lZFwiXG4gICAgICAgIGNvbG9yPVwicHJpbWFyeVwiXG4gICAgICAgIHN0YXJ0SWNvbj17PEljb24+c2VuZDwvSWNvbj59XG4gICAgICA+XG4gICAgICAgIHtzZW5kQnV0dG9uVGV4dH1cbiAgICAgIDwvQnV0dG9uPlxuICAgIDwvQm94PlxuICApO1xufVxuIl19