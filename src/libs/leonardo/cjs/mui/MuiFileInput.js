"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MuiFileInput = MuiFileInput;

var _material = require("@mui/material");

var _react = _interopRequireDefault(require("react"));

function MuiFileInput({
  chatController,
  actionRequest
}) {
  const chatCtl = chatController;

  const [files, setFiles] = _react.default.useState([]);

  const handleFileChange = _react.default.useCallback(fileList => {
    // Convert FileList to File[]
    const fileArray = [];

    if (fileList) {
      for (let i = 0; i < fileList.length; i += 1) {
        const file = fileList.item(i);

        if (file) {
          fileArray.push(file);
        }
      }
    }

    setFiles(fileArray);
  }, []);

  const setResponse = _react.default.useCallback(() => {
    if (files.length > 0) {
      const value = files.map(f => f.name).toString();
      const res = {
        type: 'file',
        value,
        files
      };
      chatCtl.setActionResponse(actionRequest, res);
    }
  }, [actionRequest, chatCtl, files]);

  const sendButtonText = actionRequest.sendButtonText ? actionRequest.sendButtonText : '>';
  return /*#__PURE__*/_react.default.createElement(_material.Box, {
    sx: {
      flex: '1 1 auto',
      maxWidth: '100%',
      display: 'flex',
      flexDirection: 'column',
      '& > *': {
        flex: '0 0 auto',
        maxWidth: '100%'
      },
      '& > * + *': {
        mt: 1
      }
    }
  }, /*#__PURE__*/_react.default.createElement(_material.List, null, files.map(f => /*#__PURE__*/_react.default.createElement("div", {
    key: `${f.name}-${f.size}`
  }, /*#__PURE__*/_react.default.createElement(_material.Divider, null), /*#__PURE__*/_react.default.createElement(_material.ListItem, {
    key: f.name
  }, /*#__PURE__*/_react.default.createElement(_material.ListItemIcon, null, /*#__PURE__*/_react.default.createElement(_material.Icon, null, "attach_file")), /*#__PURE__*/_react.default.createElement(_material.Typography, {
    style: {
      overflowWrap: 'break-word',
      minWidth: 0
    }
  }, f.name))))), /*#__PURE__*/_react.default.createElement(_material.Box, {
    sx: {
      display: 'flex',
      '& > *': {
        flex: '1 1 auto',
        minWidth: 0
      },
      '& > * + *': {
        ml: 1
      }
    }
  }, /*#__PURE__*/_react.default.createElement(_material.Button, {
    disabled: false,
    component: "label",
    variant: "contained",
    color: "primary",
    startIcon: /*#__PURE__*/_react.default.createElement(_material.Icon, null, "folder")
  }, "Select file", /*#__PURE__*/_react.default.createElement("input", {
    type: "file",
    accept: actionRequest.accept,
    multiple: actionRequest.multiple,
    onChange: e => handleFileChange(e.target.files),
    style: {
      display: 'none'
    }
  })), /*#__PURE__*/_react.default.createElement(_material.Button, {
    type: "button",
    onClick: setResponse,
    disabled: files.length === 0,
    variant: "contained",
    color: "primary",
    startIcon: /*#__PURE__*/_react.default.createElement(_material.Icon, null, "send")
  }, sendButtonText)));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,