"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MuiTextInput = MuiTextInput;

var _material = require("@mui/material");

var _react = _interopRequireDefault(require("react"));

function MuiTextInput({
  chatController,
  actionRequest
}) {
  const chatCtl = chatController;

  const [value, setValue] = _react.default.useState(actionRequest.defaultValue);

  const setResponse = _react.default.useCallback(() => {
    if (value) {
      const res = {
        type: 'text',
        value
      };
      chatCtl.setActionResponse(actionRequest, res);
      setValue('');
    }
  }, [actionRequest, chatCtl, value]);

  const handleKeyDown = _react.default.useCallback(e => {
    if (e.nativeEvent.isComposing) {
      return;
    }

    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      setResponse();
    }
  }, [setResponse]);

  const sendButtonText = actionRequest.sendButtonText ? actionRequest.sendButtonText : 'Send';
  return /*#__PURE__*/_react.default.createElement(_material.Box, {
    sx: {
      flex: '1 1 auto',
      display: 'flex',
      '& > *': {
        flex: '1 1 auto',
        minWidth: 0
      },
      '& > * + *': {
        ml: 1
      },
      '& :last-child': {
        flex: '0 1 auto'
      }
    }
  }, /*#__PURE__*/_react.default.createElement(_material.TextField, {
    placeholder: actionRequest.placeholder,
    value: value,
    onChange: e => setValue(e.target.value),
    autoFocus: true,
    multiline: true,
    inputProps: {
      onKeyDown: handleKeyDown
    },
    variant: "outlined",
    maxRows: 10
  }), /*#__PURE__*/_react.default.createElement(_material.Button, {
    type: "button",
    onClick: setResponse,
    disabled: !value,
    variant: "contained",
    color: "primary",
    startIcon: /*#__PURE__*/_react.default.createElement(_material.Icon, null, "send")
  }, sendButtonText));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tdWkvTXVpVGV4dElucHV0LnRzeCJdLCJuYW1lcyI6WyJNdWlUZXh0SW5wdXQiLCJjaGF0Q29udHJvbGxlciIsImFjdGlvblJlcXVlc3QiLCJjaGF0Q3RsIiwidmFsdWUiLCJzZXRWYWx1ZSIsIlJlYWN0IiwidXNlU3RhdGUiLCJkZWZhdWx0VmFsdWUiLCJzZXRSZXNwb25zZSIsInVzZUNhbGxiYWNrIiwicmVzIiwidHlwZSIsInNldEFjdGlvblJlc3BvbnNlIiwiaGFuZGxlS2V5RG93biIsImUiLCJuYXRpdmVFdmVudCIsImlzQ29tcG9zaW5nIiwia2V5Iiwic2hpZnRLZXkiLCJwcmV2ZW50RGVmYXVsdCIsInNlbmRCdXR0b25UZXh0IiwiZmxleCIsImRpc3BsYXkiLCJtaW5XaWR0aCIsIm1sIiwicGxhY2Vob2xkZXIiLCJ0YXJnZXQiLCJvbktleURvd24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUtPLFNBQVNBLFlBQVQsQ0FBc0I7QUFDM0JDLEVBQUFBLGNBRDJCO0FBRTNCQyxFQUFBQTtBQUYyQixDQUF0QixFQU1nQjtBQUNyQixRQUFNQyxPQUFPLEdBQUdGLGNBQWhCOztBQUNBLFFBQU0sQ0FBQ0csS0FBRCxFQUFRQyxRQUFSLElBQW9CQyxlQUFNQyxRQUFOLENBQWVMLGFBQWEsQ0FBQ00sWUFBN0IsQ0FBMUI7O0FBRUEsUUFBTUMsV0FBVyxHQUFHSCxlQUFNSSxXQUFOLENBQWtCLE1BQVk7QUFDaEQsUUFBSU4sS0FBSixFQUFXO0FBQ1QsWUFBTU8sR0FBdUIsR0FBRztBQUFFQyxRQUFBQSxJQUFJLEVBQUUsTUFBUjtBQUFnQlIsUUFBQUE7QUFBaEIsT0FBaEM7QUFDQUQsTUFBQUEsT0FBTyxDQUFDVSxpQkFBUixDQUEwQlgsYUFBMUIsRUFBeUNTLEdBQXpDO0FBQ0FOLE1BQUFBLFFBQVEsQ0FBQyxFQUFELENBQVI7QUFDRDtBQUNGLEdBTm1CLEVBTWpCLENBQUNILGFBQUQsRUFBZ0JDLE9BQWhCLEVBQXlCQyxLQUF6QixDQU5pQixDQUFwQjs7QUFRQSxRQUFNVSxhQUFhLEdBQUdSLGVBQU1JLFdBQU4sQ0FDbkJLLENBQUQsSUFBdUQ7QUFDckQsUUFBSUEsQ0FBQyxDQUFDQyxXQUFGLENBQWNDLFdBQWxCLEVBQStCO0FBQzdCO0FBQ0Q7O0FBRUQsUUFBSUYsQ0FBQyxDQUFDRyxHQUFGLEtBQVUsT0FBVixJQUFxQixDQUFDSCxDQUFDLENBQUNJLFFBQTVCLEVBQXNDO0FBQ3BDSixNQUFBQSxDQUFDLENBQUNLLGNBQUY7QUFDQVgsTUFBQUEsV0FBVztBQUNaO0FBQ0YsR0FWbUIsRUFXcEIsQ0FBQ0EsV0FBRCxDQVhvQixDQUF0Qjs7QUFjQSxRQUFNWSxjQUFjLEdBQUduQixhQUFhLENBQUNtQixjQUFkLEdBQ25CbkIsYUFBYSxDQUFDbUIsY0FESyxHQUVuQixNQUZKO0FBSUEsc0JBQ0UsNkJBQUMsYUFBRDtBQUNFLElBQUEsRUFBRSxFQUFFO0FBQ0ZDLE1BQUFBLElBQUksRUFBRSxVQURKO0FBRUZDLE1BQUFBLE9BQU8sRUFBRSxNQUZQO0FBR0YsZUFBUztBQUNQRCxRQUFBQSxJQUFJLEVBQUUsVUFEQztBQUVQRSxRQUFBQSxRQUFRLEVBQUU7QUFGSCxPQUhQO0FBT0YsbUJBQWE7QUFDWEMsUUFBQUEsRUFBRSxFQUFFO0FBRE8sT0FQWDtBQVVGLHVCQUFpQjtBQUNmSCxRQUFBQSxJQUFJLEVBQUU7QUFEUztBQVZmO0FBRE4sa0JBZ0JFLDZCQUFDLG1CQUFEO0FBQ0UsSUFBQSxXQUFXLEVBQUVwQixhQUFhLENBQUN3QixXQUQ3QjtBQUVFLElBQUEsS0FBSyxFQUFFdEIsS0FGVDtBQUdFLElBQUEsUUFBUSxFQUFHVyxDQUFELElBQWFWLFFBQVEsQ0FBQ1UsQ0FBQyxDQUFDWSxNQUFGLENBQVN2QixLQUFWLENBSGpDO0FBSUUsSUFBQSxTQUFTLE1BSlg7QUFLRSxJQUFBLFNBQVMsTUFMWDtBQU1FLElBQUEsVUFBVSxFQUFFO0FBQUV3QixNQUFBQSxTQUFTLEVBQUVkO0FBQWIsS0FOZDtBQU9FLElBQUEsT0FBTyxFQUFDLFVBUFY7QUFRRSxJQUFBLE9BQU8sRUFBRTtBQVJYLElBaEJGLGVBMEJFLDZCQUFDLGdCQUFEO0FBQ0UsSUFBQSxJQUFJLEVBQUMsUUFEUDtBQUVFLElBQUEsT0FBTyxFQUFFTCxXQUZYO0FBR0UsSUFBQSxRQUFRLEVBQUUsQ0FBQ0wsS0FIYjtBQUlFLElBQUEsT0FBTyxFQUFDLFdBSlY7QUFLRSxJQUFBLEtBQUssRUFBQyxTQUxSO0FBTUUsSUFBQSxTQUFTLGVBQUUsNkJBQUMsY0FBRDtBQU5iLEtBUUdpQixjQVJILENBMUJGLENBREY7QUF1Q0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb3gsIEJ1dHRvbiwgSWNvbiwgVGV4dEZpZWxkIH0gZnJvbSAnQG11aS9tYXRlcmlhbCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBDaGF0Q29udHJvbGxlciB9IGZyb20gJy4uL2NoYXQtY29udHJvbGxlcic7XG5pbXBvcnQgeyBUZXh0QWN0aW9uUmVxdWVzdCwgVGV4dEFjdGlvblJlc3BvbnNlIH0gZnJvbSAnLi4vY2hhdC10eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBNdWlUZXh0SW5wdXQoe1xuICBjaGF0Q29udHJvbGxlcixcbiAgYWN0aW9uUmVxdWVzdCxcbn06IHtcbiAgY2hhdENvbnRyb2xsZXI6IENoYXRDb250cm9sbGVyO1xuICBhY3Rpb25SZXF1ZXN0OiBUZXh0QWN0aW9uUmVxdWVzdDtcbn0pOiBSZWFjdC5SZWFjdEVsZW1lbnQge1xuICBjb25zdCBjaGF0Q3RsID0gY2hhdENvbnRyb2xsZXI7XG4gIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gUmVhY3QudXNlU3RhdGUoYWN0aW9uUmVxdWVzdC5kZWZhdWx0VmFsdWUpO1xuXG4gIGNvbnN0IHNldFJlc3BvbnNlID0gUmVhY3QudXNlQ2FsbGJhY2soKCk6IHZvaWQgPT4ge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgY29uc3QgcmVzOiBUZXh0QWN0aW9uUmVzcG9uc2UgPSB7IHR5cGU6ICd0ZXh0JywgdmFsdWUgfTtcbiAgICAgIGNoYXRDdGwuc2V0QWN0aW9uUmVzcG9uc2UoYWN0aW9uUmVxdWVzdCwgcmVzKTtcbiAgICAgIHNldFZhbHVlKCcnKTtcbiAgICB9XG4gIH0sIFthY3Rpb25SZXF1ZXN0LCBjaGF0Q3RsLCB2YWx1ZV0pO1xuXG4gIGNvbnN0IGhhbmRsZUtleURvd24gPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoZTogUmVhY3QuS2V5Ym9hcmRFdmVudDxIVE1MVGV4dEFyZWFFbGVtZW50Pik6IHZvaWQgPT4ge1xuICAgICAgaWYgKGUubmF0aXZlRXZlbnQuaXNDb21wb3NpbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicgJiYgIWUuc2hpZnRLZXkpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBzZXRSZXNwb25zZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW3NldFJlc3BvbnNlXSxcbiAgKTtcblxuICBjb25zdCBzZW5kQnV0dG9uVGV4dCA9IGFjdGlvblJlcXVlc3Quc2VuZEJ1dHRvblRleHRcbiAgICA/IGFjdGlvblJlcXVlc3Quc2VuZEJ1dHRvblRleHRcbiAgICA6ICdTZW5kJztcblxuICByZXR1cm4gKFxuICAgIDxCb3hcbiAgICAgIHN4PXt7XG4gICAgICAgIGZsZXg6ICcxIDEgYXV0bycsXG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgJyYgPiAqJzoge1xuICAgICAgICAgIGZsZXg6ICcxIDEgYXV0bycsXG4gICAgICAgICAgbWluV2lkdGg6IDAsXG4gICAgICAgIH0sXG4gICAgICAgICcmID4gKiArIConOiB7XG4gICAgICAgICAgbWw6IDEsXG4gICAgICAgIH0sXG4gICAgICAgICcmIDpsYXN0LWNoaWxkJzoge1xuICAgICAgICAgIGZsZXg6ICcwIDEgYXV0bycsXG4gICAgICAgIH0sXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgcGxhY2Vob2xkZXI9e2FjdGlvblJlcXVlc3QucGxhY2Vob2xkZXJ9XG4gICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgb25DaGFuZ2U9eyhlKTogdm9pZCA9PiBzZXRWYWx1ZShlLnRhcmdldC52YWx1ZSl9XG4gICAgICAgIGF1dG9Gb2N1c1xuICAgICAgICBtdWx0aWxpbmVcbiAgICAgICAgaW5wdXRQcm9wcz17eyBvbktleURvd246IGhhbmRsZUtleURvd24gfX1cbiAgICAgICAgdmFyaWFudD1cIm91dGxpbmVkXCJcbiAgICAgICAgbWF4Um93cz17MTB9XG4gICAgICAvPlxuICAgICAgPEJ1dHRvblxuICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgb25DbGljaz17c2V0UmVzcG9uc2V9XG4gICAgICAgIGRpc2FibGVkPXshdmFsdWV9XG4gICAgICAgIHZhcmlhbnQ9XCJjb250YWluZWRcIlxuICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICBzdGFydEljb249ezxJY29uPnNlbmQ8L0ljb24+fVxuICAgICAgPlxuICAgICAgICB7c2VuZEJ1dHRvblRleHR9XG4gICAgICA8L0J1dHRvbj5cbiAgICA8L0JveD5cbiAgKTtcbn1cbiJdfQ==